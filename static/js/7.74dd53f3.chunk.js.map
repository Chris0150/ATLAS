{"version":3,"sources":["utils/_data.tsx","components/charts/Histogram.tsx"],"names":["path","a","fetch","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","value","results","Papa","parse","header","data","fetchData","Histogram","useState","setData","layout","setLayout","config","setConfig","useEffect","treatData","rows","i","x","y","values","Object","keys","j","length","indexOf","parsedValue","parseFloat","push","k","dataRow","name","ncontours","colorscale","reversescale","showscale","type","marker","color","marker__color","size","marker__size","opacity","marker__opacity","yaxis","xaxis","chartConfig","configurationJSON","chartLayout","layoutJSON","histogram","chartData","getData"],"mappings":"2NAGA,WAA0BA,GAA1B,yBAAAC,EAAA,sEAC2BC,MAAMF,GADjC,cACUG,EADV,OAEUC,EAASD,EAASE,KAAKC,YAFjC,SAGyBF,EAAOG,OAHhC,cAGUC,EAHV,OAIUC,EAAU,IAAIC,YAAY,SAC1BC,EAAMF,EAAQG,OAAOJ,EAAOK,OAC5BC,EAAUC,IAAKC,MAAML,EAAK,CAAEM,QAAQ,IAN9C,kBAOWH,EAAQI,MAPnB,6C,sBAUeC,I,opPC+EAC,UApEa,WAAoB,IAAD,EACrBC,mBAAS,IADY,mBACtCH,EADsC,KAChCI,EADgC,OAEjBD,mBAAS,IAFQ,mBAEtCE,EAFsC,KAE9BC,EAF8B,OAGjBH,mBAAS,IAHQ,mBAGtCI,EAHsC,KAG9BC,EAH8B,KAiE7C,OA5DAC,qBAAU,WAAM,4CAEd,mBAGWC,EAHX,eAAA3B,EAAA,6DAGW2B,EAHX,SAGqBC,GAGjB,IAFA,IAAIX,EAAO,GAEFY,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAM1B,IALA,IAAIC,EAAI,GACJC,EAAI,GACJC,EAAcC,OAAOD,OAAOJ,EAAKC,IACjCK,EAAOD,OAAOC,KAAKN,EAAKC,IAEnBM,EAAI,EAAGA,EAAIH,EAAOI,OAAQD,IACjC,GAAID,EAAKC,GAAGE,QAAQ,OAAS,EAAG,CAC9B,IAAIzB,EAAQoB,EAAOG,GACfG,EAAcC,WAAW3B,GAC7BkB,EAAEU,KAAKF,GAIX,IAAK,IAAIG,EAAI,EAAGA,EAAIT,EAAOI,OAAQK,IAC7BP,EAAKO,GAAGJ,QAAQ,OAAS,GAAGN,EAAES,KAAKD,WAAWP,EAAOS,KAG3D,IAAIC,EAAqB,CACvBZ,EAAGA,EACHC,EAAGA,EACHY,KAAMf,EAAKC,GAAGc,KACdC,UAAWhB,EAAKC,GAAGe,UACnBC,WAAYjB,EAAKC,GAAGgB,WACpBC,cAAc,EACdC,UAAWnB,EAAKC,GAAGkB,UACnBC,KAAMpB,EAAKC,GAAGmB,KACdC,OAAQ,CACNC,MAAOtB,EAAKC,GAAGsB,cACfC,KAAMxB,EAAKC,GAAGwB,aACdC,QAAS1B,EAAKC,GAAG0B,iBAEnBC,MAAO5B,EAAKC,GAAG2B,MACfC,MAAO7B,EAAKC,GAAG4B,OAGjBxC,EAAKuB,KAAKE,GAEZ,OAAOzB,GA5CX,SACyBC,YAAU,wBADnC,OACQU,EADR,OA+CM8B,EAAcC,EAAkBnC,OAChCoC,EAAcC,EAAWvC,OAAOwC,UAChCC,EAAYpC,EAAUC,GAE1BP,EAAQ0C,GACRtC,EAAUiC,GACVnC,EAAUqC,GArDZ,6CAFc,uBAAC,WAAD,wBAyDdI,KACC,IAEI,kBAAC,IAAD,CAAM/C,KAAMA,EAAMK,OAAQA,EAAQE,OAAQA","file":"static/js/7.74dd53f3.chunk.js","sourcesContent":["\r\nimport Papa from \"papaparse\";\r\n\r\nasync function fetchData (path) {\r\n    const response = await fetch(path);\r\n    const reader = response.body.getReader();\r\n    const result = await reader.read();\r\n    const decoder = new TextDecoder(\"utf-8\");\r\n    const csv = decoder.decode(result.value);\r\n    const results = Papa.parse(csv, { header: true });\r\n    return results.data;\r\n}\r\n\r\nexport default fetchData\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport fetchData from \"../../utils/_data\";\r\nimport configurationJSON from \"../../utils/config.json\"\r\nimport layoutJSON from \"../../utils/layout.json\"\r\n\r\ninterface dataModel {\r\n  x: Number[],\r\n  y: Number[],\r\n  name: String,\r\n  ncontours: Number,\r\n  colorscale: String,\r\n  reversescale: Boolean,\r\n  showscale: Boolean,\r\n  type: String,\r\n  yaxis: Number,\r\n  xaxis: Number,\r\n  marker: {\r\n    size: Number,\r\n    opacity: Number,\r\n    color: String\r\n  }\r\n}\r\n\r\nconst Histogram: React.FC = (): JSX.Element => {\r\n  const [data, setData] = useState([]);\r\n  const [layout, setLayout] = useState({});\r\n  const [config, setConfig] = useState({});\r\n\r\n  useEffect(() => {\r\n\r\n    async function getData() {\r\n      const rows: [] = await fetchData(\"./csv/_histogram.csv\")\r\n\r\n      function treatData(rows) {\r\n        var data = [];\r\n\r\n        for (var i = 1; i < 4; i++) {\r\n          let x = []\r\n          let y = []\r\n          let values: any = Object.values(rows[i]);\r\n          let keys = Object.keys(rows[i]);\r\n\r\n          for (var j = 0; j < values.length; j++) {\r\n            if (keys[j].indexOf(\"x_\") > -1) {\r\n              var value = values[j];\r\n              var parsedValue = parseFloat(value);\r\n              x.push(parsedValue);\r\n            }\r\n          }\r\n\r\n          for (var k = 0; k < values.length; k++) {\r\n            if (keys[k].indexOf(\"y_\") > -1) y.push(parseFloat(values[k]))\r\n          }\r\n\r\n          var dataRow: dataModel = {\r\n            x: x,\r\n            y: y,\r\n            name: rows[i].name,\r\n            ncontours: rows[i].ncontours,\r\n            colorscale: rows[i].colorscale,\r\n            reversescale: true,\r\n            showscale: rows[i].showscale,\r\n            type: rows[i].type,\r\n            marker: {\r\n              color: rows[i].marker__color,\r\n              size: rows[i].marker__size,\r\n              opacity: rows[i].marker__opacity\r\n            },\r\n            yaxis: rows[i].yaxis,\r\n            xaxis: rows[i].xaxis\r\n          }\r\n\r\n          data.push(dataRow);\r\n        }\r\n        return data\r\n      }\r\n\r\n      var chartConfig = configurationJSON.config;\r\n      var chartLayout = layoutJSON.layout.histogram;\r\n      var chartData = treatData(rows);\r\n\r\n      setData(chartData);\r\n      setConfig(chartConfig);\r\n      setLayout(chartLayout);\r\n    }\r\n    getData();\r\n  }, []);\r\n\r\n  return <Plot data={data} layout={layout} config={config} />\r\n};\r\n\r\nexport default Histogram;\r\n"],"sourceRoot":""}