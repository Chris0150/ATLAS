{"version":3,"sources":["utils/_data.tsx","components/charts/Bars.tsx"],"names":["path","a","fetch","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","value","results","Papa","parse","header","data","fetchData","Bars","useState","setData","layout","setLayout","config","setConfig","useEffect","treatData","rows","i","length","dataRow","name","type","mode","x","x__001","x__002","x__003","y","y__001","y__002","y__003","marker","color","marker__color","push","chartConfig","configurationJSON","chartLayout","layoutJSON","bars","chartData","getData"],"mappings":"2NAGA,WAA0BA,GAA1B,yBAAAC,EAAA,sEAC2BC,MAAMF,GADjC,cACUG,EADV,OAEUC,EAASD,EAASE,KAAKC,YAFjC,SAGyBF,EAAOG,OAHhC,cAGUC,EAHV,OAIUC,EAAU,IAAIC,YAAY,SAC1BC,EAAMF,EAAQG,OAAOJ,EAAOK,OAC5BC,EAAUC,IAAKC,MAAML,EAAK,CAAEM,QAAQ,IAN9C,kBAOWH,EAAQI,MAPnB,6C,sBAUeC,I,opPC0CAC,UAxCQ,WAAoB,IAAD,EAChBC,mBAAS,IADO,mBACjCH,EADiC,KAC3BI,EAD2B,OAEZD,mBAAS,IAFG,mBAEjCE,EAFiC,KAEzBC,EAFyB,OAGZH,mBAAS,IAHG,mBAGjCI,EAHiC,KAGzBC,EAHyB,KAqCxC,OAhCAC,qBAAU,WAAM,4CAEd,mBAGWC,EAHX,eAAA3B,EAAA,6DAGW2B,EAHX,SAGqBC,GAEjB,IADA,IAAIX,EAAO,GACFY,EAAI,EAAGA,EAAID,EAAKE,OAAS,EAAGD,IAAK,CACxC,IAAIE,EAAoB,CACtBC,KAAMJ,EAAKC,GAAGG,KACdC,KAAML,EAAKC,GAAGI,KACdC,KAAMN,EAAKC,GAAGK,KACdC,EAAG,CAACP,EAAKC,GAAGO,OAAQR,EAAKC,GAAGQ,OAAQT,EAAKC,GAAGS,QAC5CC,EAAG,CAACX,EAAKC,GAAGW,OAAQZ,EAAKC,GAAGY,OAAQb,EAAKC,GAAGa,QAC5CC,OAAQ,CAAEC,MAAOhB,EAAKC,GAAGgB,gBAE3B5B,EAAK6B,KAAKf,GAEZ,OAAOd,GAhBX,SACyBC,YAAU,0BADnC,OACQU,EADR,OAmBMmB,EAAcC,EAAkBxB,OAChCyB,EAAcC,EAAW5B,OAAO6B,KAChCC,EAAYzB,EAAUC,GAE1BP,EAAQ+B,GACR3B,EAAUsB,GACVxB,EAAU0B,GAzBZ,6CAFc,uBAAC,WAAD,wBA6BdI,KACC,IAEI,kBAAC,IAAD,CAAMpC,KAAMA,EAAMK,OAAQA,EAAQE,OAAQA","file":"static/js/4.b1543228.chunk.js","sourcesContent":["\r\nimport Papa from \"papaparse\";\r\n\r\nasync function fetchData (path) {\r\n    const response = await fetch(path);\r\n    const reader = response.body.getReader();\r\n    const result = await reader.read();\r\n    const decoder = new TextDecoder(\"utf-8\");\r\n    const csv = decoder.decode(result.value);\r\n    const results = Papa.parse(csv, { header: true });\r\n    return results.data;\r\n}\r\n\r\nexport default fetchData\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport fetchData from \"../../utils/_data\";\r\nimport configurationJSON from \"../../utils/config.json\"\r\nimport layoutJSON from \"../../utils/layout.json\"\r\n\r\ninterface dataModel{\r\n  name: String,\r\n  type: String,\r\n  mode: String,\r\n  x: String[],\r\n  y: String[],\r\n  marker: { color: String }\r\n}\r\n\r\nconst Bars: React.FC = (): JSX.Element => {\r\n  const [data, setData] = useState([]);\r\n  const [layout, setLayout] = useState({});\r\n  const [config, setConfig] = useState({});\r\n\r\n  useEffect(() => {\r\n\r\n    async function getData() {\r\n      const rows:[] =  await fetchData(\"./public/csv/_bars.csv\")\r\n\r\n      function treatData(rows) {\r\n        var data = [];\r\n        for (var i = 0; i < rows.length - 1; i++) {\r\n          var dataRow:dataModel = {\r\n            name: rows[i].name,\r\n            type: rows[i].type,\r\n            mode: rows[i].mode,\r\n            x: [rows[i].x__001, rows[i].x__002, rows[i].x__003],\r\n            y: [rows[i].y__001, rows[i].y__002, rows[i].y__003],\r\n            marker: { color: rows[i].marker__color },\r\n          }\r\n          data.push(dataRow);\r\n        }\r\n        return data\r\n      }\r\n\r\n      var chartConfig = configurationJSON.config;\r\n      var chartLayout = layoutJSON.layout.bars;\r\n      var chartData = treatData(rows);\r\n\r\n      setData(chartData);\r\n      setConfig(chartConfig);\r\n      setLayout(chartLayout);\r\n    }\r\n    getData();\r\n  }, []);\r\n\r\n  return <Plot data={data} layout={layout} config={config} />;\r\n};\r\n\r\nexport default Bars;\r\n"],"sourceRoot":""}