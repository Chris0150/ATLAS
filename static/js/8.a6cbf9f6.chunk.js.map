{"version":3,"sources":["utils/_data.tsx","components/charts/Map.tsx"],"names":["path","a","fetch","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","value","results","Papa","parse","header","data","fetchData","unpack","rows","key","map","row","Map","useState","setData","layout","setLayout","config","setConfig","useEffect","chartData","type","lon","lat","text","marker","color","size","chartConfig","configurationJSON","chartLayout","layoutJSON","getData"],"mappings":"2NAGA,WAA0BA,GAA1B,yBAAAC,EAAA,sEAC2BC,MAAMF,GADjC,cACUG,EADV,OAEUC,EAASD,EAASE,KAAKC,YAFjC,SAGyBF,EAAOG,OAHhC,cAGUC,EAHV,OAIUC,EAAU,IAAIC,YAAY,SAC1BC,EAAMF,EAAQG,OAAOJ,EAAOK,OAC5BC,EAAUC,IAAKC,MAAML,EAAK,CAAEM,QAAQ,IAN9C,kBAOWH,EAAQI,MAPnB,6C,sBAUeC,I,opPCIf,SAASC,EAAOC,EAAMC,GACpB,OAAOD,EAAKE,KAAI,SAAUC,GACxB,OAAOA,EAAIF,MAoCAG,UAhCO,WAAoB,IAAD,EACfC,mBAAS,IADM,mBAChCR,EADgC,KAC1BS,EAD0B,OAEXD,mBAAS,IAFE,mBAEhCE,EAFgC,KAExBC,EAFwB,OAGXH,mBAAS,IAHE,mBAGhCI,EAHgC,KAGxBC,EAHwB,KA6BvC,OAxBAC,qBAAU,WAAM,4CACd,kCAAA/B,EAAA,sEACyBkB,YAAU,kBADnC,OACQE,EADR,OAGMY,EAAwB,CAC1B,CACEC,KAAM,gBACNC,IAAKf,EAAOC,EAAM,OAClBe,IAAKhB,EAAOC,EAAM,OAClBgB,KAAMjB,EAAOC,EAAM,aACnBiB,OAAQ,CAAEC,MAAO,UAAWC,KAAM,KAIlCC,EAAeC,EAAkBZ,OACjCa,EAAcC,EAAWhB,OAAOL,IAEpCI,EAAQM,GACRF,EAAUU,GACVZ,EAAUc,GAlBZ,4CADc,uBAAC,WAAD,wBAqBdE,KACC,IAEI,kBAAC,IAAD,CAAM3B,KAAMA,EAAMU,OAAQA,EAAQE,OAAQA","file":"static/js/8.a6cbf9f6.chunk.js","sourcesContent":["\r\nimport Papa from \"papaparse\";\r\n\r\nasync function fetchData (path) {\r\n    const response = await fetch(path);\r\n    const reader = response.body.getReader();\r\n    const result = await reader.read();\r\n    const decoder = new TextDecoder(\"utf-8\");\r\n    const csv = decoder.decode(result.value);\r\n    const results = Papa.parse(csv, { header: true });\r\n    return results.data;\r\n}\r\n\r\nexport default fetchData\r\n","import React , { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport fetchData from \"../../utils/_data\";\r\nimport configurationJSON from \"../../utils/config.json\"\r\nimport layoutJSON from \"../../utils/layout.json\"\r\n\r\ninterface dataModel {\r\n  type: String,\r\n  lon: Number,\r\n  lat: Number,\r\n  text: String,\r\n  marker: {\r\n    size: Number,\r\n    color: String\r\n  }\r\n}\r\n\r\nfunction unpack(rows, key) {\r\n  return rows.map(function (row) {\r\n    return row[key];\r\n  });\r\n}\r\n\r\nconst Map: React.FC = (): JSX.Element => {\r\n  const [data, setData] = useState([]);\r\n  const [layout, setLayout] = useState({});\r\n  const [config, setConfig] = useState({});\r\n\r\n  useEffect(() => {\r\n    async function getData() {\r\n      const rows: [] = await fetchData(\"./csv/_map.csv\")\r\n\r\n      var chartData:[dataModel] = [\r\n        {\r\n          type: \"scattermapbox\",\r\n          lon: unpack(rows, \"Lon\"),\r\n          lat: unpack(rows, \"Lat\"),\r\n          text: unpack(rows, \"Globvalue\"),\r\n          marker: { color: \"#b71522\", size: 5 }\r\n        },\r\n      ];\r\n\r\n      var chartConfig =  configurationJSON.config;\r\n      var chartLayout = layoutJSON.layout.map;\r\n\r\n      setData(chartData);\r\n      setConfig(chartConfig);\r\n      setLayout(chartLayout);\r\n    }\r\n    getData();\r\n  }, []);\r\n\r\n  return <Plot data={data} layout={layout} config={config} />\r\n};\r\n\r\nexport default Map;\r\n"],"sourceRoot":""}