{"version":3,"sources":["utils/_data.tsx","components/charts/MapBubbles.tsx"],"names":["path","a","fetch","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","value","results","Papa","parse","header","data","fetchData","unpack","rows","key","map","row","MapBubbles","useState","setData","layout","setLayout","config","setConfig","useEffect","cityName","cityPop","cityLat","cityLon","citySize","hoverText","i","length","currentSize","currentText","push","chartData","type","locationmode","lat","lon","hoverinfo","text","marker","size","color","cmin","cmax","colorscale","colorbar","title","ticksuffix","showticksuffix","line","chartConfig","configurationJSON","chartLayout","layoutJSON","mapBubbles","getData"],"mappings":"2NAGA,WAA0BA,GAA1B,yBAAAC,EAAA,sEAC2BC,MAAMF,GADjC,cACUG,EADV,OAEUC,EAASD,EAASE,KAAKC,YAFjC,SAGyBF,EAAOG,OAHhC,cAGUC,EAHV,OAIUC,EAAU,IAAIC,YAAY,SAC1BC,EAAMF,EAAQG,OAAOJ,EAAOK,OAC5BC,EAAUC,IAAKC,MAAML,EAAK,CAAEM,QAAQ,IAN9C,kBAOWH,EAAQI,MAPnB,6C,sBAUeC,I,opPCgBf,SAASC,EAAOC,EAAMC,GACpB,OAAOD,EAAKE,KAAI,SAAUC,GAAO,OAAOA,EAAIF,MAgE/BG,UA7Dc,WAAoB,IAAD,EACtBC,mBAAS,IADa,mBACvCR,EADuC,KACjCS,EADiC,OAElBD,mBAAS,IAFS,mBAEvCE,EAFuC,KAE/BC,EAF+B,OAGlBH,mBAAS,IAHS,mBAGvCI,EAHuC,KAG/BC,EAH+B,KA0D9C,OArDAC,qBAAU,WAAM,4CACd,oDAAA/B,EAAA,sEACwBkB,YAAU,qBADlC,OAWE,IAVME,EADR,OAGMY,EAAWb,EAAOC,EAAM,QAC1Ba,EAAUd,EAAOC,EAAM,OACvBc,EAAUf,EAAOC,EAAM,OACvBe,EAAUhB,EAAOC,EAAM,OACvBgB,EAAqB,GACrBC,EAAsB,GACd,IAEDC,EAAI,EAAGA,EAAIL,EAAQM,OAAQD,IAC9BE,EAAqBP,EAAQK,GAHzB,KAGuC,EAC3CG,EAAqBT,EAASM,GAAK,SAAWL,EAAQK,GAC1DF,EAASM,KAAKF,GACdH,EAAUK,KAAKD,GAGbE,EAAwB,CAAC,CAC3BC,KAAM,aACNC,aAAc,aACdC,IAAKZ,EACLa,IAAKZ,EACLa,UAAW,OACXC,KAAMZ,EACNa,OAAQ,CACNC,KAAMf,EACNgB,MAAO,CAAC,GAAI,GAAI,GAAI,IACpBC,KAAM,EACNC,KAAM,GACNC,WAAY,OACZC,SAAU,CACNC,MAAO,gBACPC,WAAY,IACZC,eAAgB,QAEpBC,KAAM,CACFR,MAAO,YAKXS,EAAcC,EAAkBjC,OAChCkC,EAAcC,EAAWrC,OAAOsC,WAEpCvC,EAAQiB,GACRb,EAAU+B,GACVjC,EAAUmC,GA/CZ,6CADc,uBAAC,WAAD,wBAkDdG,KACC,IAEI,kBAAC,IAAD,CAAMjD,KAAMA,EAAMU,OAAQA,EAAQE,OAAQA","file":"static/js/9.cffc32cb.chunk.js","sourcesContent":["\r\nimport Papa from \"papaparse\";\r\n\r\nasync function fetchData (path) {\r\n    const response = await fetch(path);\r\n    const reader = response.body.getReader();\r\n    const result = await reader.read();\r\n    const decoder = new TextDecoder(\"utf-8\");\r\n    const csv = decoder.decode(result.value);\r\n    const results = Papa.parse(csv, { header: true });\r\n    return results.data;\r\n}\r\n\r\nexport default fetchData\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport fetchData   from \"../../utils/_data\";\r\nimport configurationJSON from \"../../utils/config.json\"\r\nimport layoutJSON from \"../../utils/layout.json\"\r\n\r\ninterface dataModel{\r\n  type: String,\r\n  locationmode: String,\r\n  lat: Number,\r\n  lon: Number,\r\n  hoverinfo: String,\r\n  text: String[],\r\n  marker: {\r\n    size: Number[],\r\n    cmin: Number,\r\n    cmax: Number,\r\n    color: Number[],\r\n    colorscale: String,\r\n    colorbar: {\r\n        title: String,\r\n        ticksuffix: String,\r\n        showticksuffix: String\r\n    },\r\n    line: {\r\n        color: String\r\n    }}\r\n}\r\n\r\nfunction unpack(rows, key) {\r\n  return rows.map(function (row) { return row[key]; });\r\n}\r\n\r\nconst MapBubbles: React.FC = (): JSX.Element => {\r\n  const [data, setData] = useState([]);\r\n  const [layout, setLayout] = useState({});\r\n  const [config, setConfig] = useState({});\r\n\r\n  useEffect(() => {\r\n    async function getData() {      \r\n      const rows:[] = await fetchData(\"./csv/_mapBub.csv\")\r\n\r\n      var cityName = unpack(rows, 'name'),\r\n        cityPop = unpack(rows, 'pop'),\r\n        cityLat = unpack(rows, 'lat'),\r\n        cityLon = unpack(rows, 'lon'),\r\n        citySize: number[] = [],\r\n        hoverText: string[] = [],\r\n        scale = 50000;\r\n\r\n      for (var i = 0; i < cityPop.length; i++) {\r\n        var currentSize:number = cityPop[i] / scale || 0;\r\n        var currentText:string = cityName[i] + \" pop: \" + cityPop[i];\r\n        citySize.push(currentSize);\r\n        hoverText.push(currentText);\r\n      }\r\n\r\n      var chartData:[dataModel] = [{\r\n        type: 'scattergeo',\r\n        locationmode: 'USA-states',\r\n        lat: cityLat,\r\n        lon: cityLon,\r\n        hoverinfo: 'text',\r\n        text: hoverText,\r\n        marker: {\r\n          size: citySize,\r\n          color: [10, 20, 40, 50],\r\n          cmin: 0,\r\n          cmax: 50,\r\n          colorscale: 'Reds',\r\n          colorbar: {\r\n              title: 'Concentration',\r\n              ticksuffix: '%',\r\n              showticksuffix: 'last'\r\n          },\r\n          line: {\r\n              color: 'black'\r\n          }\r\n        }\r\n      }];\r\n\r\n      var chartConfig = configurationJSON.config;\r\n      var chartLayout = layoutJSON.layout.mapBubbles;\r\n\r\n      setData(chartData);\r\n      setConfig(chartConfig);\r\n      setLayout(chartLayout);\r\n    }\r\n    getData();\r\n  }, []);\r\n\r\n  return <Plot data={data} layout={layout} config={config} />\r\n};\r\n\r\nexport default MapBubbles;\r\n"],"sourceRoot":""}