{"version":3,"sources":["utils/_data.tsx","components/charts/Timeline.tsx"],"names":["path","a","fetch","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","value","results","Papa","parse","header","data","fetchData","unpack","rows","key","map","row","Timeline","useState","setData","frames","setFrames","layout","setLayout","config","setConfig","useEffect","x","y","x2","y2","i","slice","trace2","type","mode","name","fill","line","color","trace1","chartData","chartLayout","layoutJSON","timeline","chartConfig","configurationJSON","getData"],"mappings":"4NAGA,WAA0BA,GAA1B,yBAAAC,EAAA,sEAC2BC,MAAMF,GADjC,cACUG,EADV,OAEUC,EAASD,EAASE,KAAKC,YAFjC,SAGyBF,EAAOG,OAHhC,cAGUC,EAHV,OAIUC,EAAU,IAAIC,YAAY,SAC1BC,EAAMF,EAAQG,OAAOJ,EAAOK,OAC5BC,EAAUC,IAAKC,MAAML,EAAK,CAAEM,QAAQ,IAN9C,kBAOWH,EAAQI,MAPnB,6C,sBAUeC,I,opPCGf,SAASC,EAAOC,EAAMC,GAClB,OAAOD,EAAKE,KAAI,SAASC,GAAO,OAAOA,EAAIF,MA+DhCG,UA5DY,WAAoB,IAAD,EAClBC,mBAAS,IADS,mBACnCR,EADmC,KAC7BS,EAD6B,OAEdD,mBAAS,IAFK,mBAEnCE,EAFmC,KAE3BC,EAF2B,OAGdH,mBAAS,IAHK,mBAGnCI,EAHmC,KAG3BC,EAH2B,OAIdL,mBAAS,IAJK,mBAInCM,EAJmC,KAI3BC,EAJ2B,KAyD1C,OAnDAC,qBAAU,WAAM,4CACZ,kDAAAjC,EAAA,sEAC0BkB,YAAU,uBADpC,OAUI,IATME,EADV,OAGQO,EAAS,GACTO,EAAIf,EAAOC,EAAM,QACjBe,EAAIhB,EAAOC,EAAM,QACjBgB,EAAKjB,EAAOC,EAAM,QAClBiB,EAAKlB,EAAOC,EAAM,OAEd,IACCkB,EAAI,EAAGA,EADR,IACeA,IACrBX,EAAOW,GAAK,CAACrB,KAAM,CAAC,CAACiB,EAAG,GAAIC,EAAG,IAAK,CAACD,EAAG,GAAIC,EAAG,MAC/CR,EAAOW,GAAGrB,KAAK,GAAGiB,EAAIA,EAAEK,MAAM,EAAGD,EAAE,GACnCX,EAAOW,GAAGrB,KAAK,GAAGkB,EAAIA,EAAEI,MAAM,EAAGD,EAAE,GACnCX,EAAOW,GAAGrB,KAAK,GAAGiB,EAAIE,EAAGG,MAAM,EAAGD,EAAE,GACpCX,EAAOW,GAAGrB,KAAK,GAAGkB,EAAIE,EAAGE,MAAM,EAAGD,EAAE,GAGlCE,EAAmB,CACrBC,KAAM,UACNC,KAAM,QACNC,KAAM,OACNC,KAAM,UACNV,EAAGP,EAAO,GAAGV,KAAK,GAAGiB,EACrBC,EAAGR,EAAO,GAAGV,KAAK,GAAGkB,EACrBU,KAAM,CAACC,MAAO,YAGZC,EAAmB,CACrBN,KAAM,UACNC,KAAM,QACNC,KAAM,MACNC,KAAM,GACNV,EAAGP,EAAO,GAAGV,KAAK,GAAGiB,EACrBC,EAAGR,EAAO,GAAGV,KAAK,GAAGkB,EACrBU,KAAM,CAACC,MAAO,WAGZE,EAAY,CAACD,EAAOP,GACpBS,EAAcC,EAAWrB,OAAOsB,SAChCC,EAAcC,EAAkBtB,OAEpCH,EAAUD,GACVD,EAAQsB,GACRhB,EAAUoB,GACVtB,EAAUmB,GA7Cd,6CADY,uBAAC,WAAD,wBAgDZK,KACD,IAEI,kBAAC,IAAD,CAAMrC,KAAMA,EAAMY,OAAQA,EAAQE,OAAQA,EAAQJ,OAAQA","file":"static/js/13.65018805.chunk.js","sourcesContent":["\r\nimport Papa from \"papaparse\";\r\n\r\nasync function fetchData (path) {\r\n    const response = await fetch(path);\r\n    const reader = response.body.getReader();\r\n    const result = await reader.read();\r\n    const decoder = new TextDecoder(\"utf-8\");\r\n    const csv = decoder.decode(result.value);\r\n    const results = Papa.parse(csv, { header: true });\r\n    return results.data;\r\n}\r\n\r\nexport default fetchData\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport fetchData from \"../../utils/_data\";\r\nimport configurationJSON from \"../../utils/config.json\"\r\nimport layoutJSON from \"../../utils/layout.json\"\r\n\r\ninterface dataModel{\r\n  y: String[],\r\n  x: String[]\r\n  type: String,\r\n  mode: String,\r\n  name: String,\r\n  fill: String,\r\n  line: { color: String },\r\n}\r\n\r\nfunction unpack(rows, key) {\r\n    return rows.map(function(row) { return row[key]; });\r\n  }\r\n\r\nconst Timeline: React.FC = (): JSX.Element => {\r\n    const [data, setData] = useState([]);\r\n    const [frames, setFrames] = useState([]);\r\n    const [layout, setLayout] = useState({});\r\n    const [config, setConfig] = useState({});\r\n\r\n    useEffect(() => {\r\n        async function getData() {\r\n            const rows:[] = await fetchData(\"./csv/_timeline.csv\")\r\n\r\n            var frames = []\r\n            var x = unpack(rows, 'Date')\r\n            var y = unpack(rows, 'High')\r\n            var x2 = unpack(rows, 'Date')\r\n            var y2 = unpack(rows, 'Low')\r\n          \r\n            var n = 100;\r\n            for (var i = 0; i < n; i++) {\r\n              frames[i] = {data: [{x: [], y: []}, {x: [], y: []}]}\r\n              frames[i].data[1].x = x.slice(0, i+1);\r\n              frames[i].data[1].y = y.slice(0, i+1);\r\n              frames[i].data[0].x = x2.slice(0, i+1);\r\n              frames[i].data[0].y = y2.slice(0, i+1);\r\n            }\r\n          \r\n            var trace2:dataModel = {\r\n              type: \"scatter\",\r\n              mode: \"lines\",\r\n              name: 'High',\r\n              fill: 'tonexty',\r\n              x: frames[5].data[1].x,\r\n              y: frames[5].data[1].y,\r\n              line: {color: '#b71522'}\r\n            }\r\n          \r\n            var trace1:dataModel = {\r\n              type: \"scatter\",\r\n              mode: \"lines\",\r\n              name: 'Low',\r\n              fill: '',\r\n              x: frames[5].data[0].x,\r\n              y: frames[5].data[0].y,\r\n              line: {color: 'orange'}\r\n            }\r\n          \r\n            var chartData = [trace1,trace2];\r\n            var chartLayout = layoutJSON.layout.timeline;\r\n            var chartConfig = configurationJSON.config;\r\n\r\n            setFrames(frames);\r\n            setData(chartData);\r\n            setConfig(chartConfig);\r\n            setLayout(chartLayout);\r\n        }\r\n        getData();\r\n    }, []);\r\n\r\n    return <Plot data={data} layout={layout} config={config} frames={frames}/>\r\n};\r\n\r\nexport default Timeline;\r\n"],"sourceRoot":""}