{"version":3,"sources":["utils/_data.tsx","components/charts/Surface3D.tsx"],"names":["path","a","fetch","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","value","results","Papa","parse","header","data","fetchData","Surface3D","useState","setData","layout","setLayout","config","setConfig","useEffect","treatData","rows","z","i","length","push","Object","values","dataRow","type","masterGraph","title","xAxis","yAxis","zAxis","chartData","chartConfig","configurationJSON","chartLayout","layoutJSON","surface3D","getData"],"mappings":"4NAGA,WAA0BA,GAA1B,yBAAAC,EAAA,sEAC2BC,MAAMF,GADjC,cACUG,EADV,OAEUC,EAASD,EAASE,KAAKC,YAFjC,SAGyBF,EAAOG,OAHhC,cAGUC,EAHV,OAIUC,EAAU,IAAIC,YAAY,SAC1BC,EAAMF,EAAQG,OAAOJ,EAAOK,OAC5BC,EAAUC,IAAKC,MAAML,EAAK,CAAEM,QAAQ,IAN9C,kBAOWH,EAAQI,MAPnB,6C,sBAUeC,I,opPCgDAC,UA5Ca,WAAoB,IAAD,EACrBC,mBAAS,IADY,mBACtCH,EADsC,KAChCI,EADgC,OAEjBD,mBAAS,IAFQ,mBAEtCE,EAFsC,KAE9BC,EAF8B,OAGjBH,mBAAS,IAHQ,mBAGtCI,EAHsC,KAG9BC,EAH8B,KAyC7C,OApCAC,qBAAU,WAAM,4CACd,mBAIWC,EAJX,eAAA3B,EAAA,6DAIW2B,EAJX,SAIqBC,GAGjB,IAFA,IAAIX,EAAO,GACPY,EAAI,GACCC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC/BD,EAAEG,KAAKC,OAAOC,OAAON,EAAKE,KAE5B,IAAIK,EAAoB,CACtBC,KAAM,UACNC,YAAa,CACXC,MAAO,kBACPC,MAAO,QACPC,MAAO,QACPC,MAAO,SAETZ,EAAGA,GAGL,OADAZ,EAAKe,KAAKG,GACHlB,GArBX,SAEyBC,YAAU,wBAFnC,OAEQU,EAFR,OAwBMc,EAAYf,EAAUC,GACtBe,EAAcC,EAAkBpB,OAChCqB,EAAcC,EAAWxB,OAAOyB,UAEpC1B,EAAQqB,GACRjB,EAAUkB,GACVpB,EAAUsB,GA9BZ,6CADc,uBAAC,WAAD,wBAiCdG,KACC,IAEI,kBAAC,IAAD,CAAM/B,KAAMA,EAAMK,OAAQA,EAAQE,OAAQA","file":"static/js/12.ae2c0513.chunk.js","sourcesContent":["\r\nimport Papa from \"papaparse\";\r\n\r\nasync function fetchData (path) {\r\n    const response = await fetch(path);\r\n    const reader = response.body.getReader();\r\n    const result = await reader.read();\r\n    const decoder = new TextDecoder(\"utf-8\");\r\n    const csv = decoder.decode(result.value);\r\n    const results = Papa.parse(csv, { header: true });\r\n    return results.data;\r\n}\r\n\r\nexport default fetchData\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport fetchData from \"../../utils/_data\";\r\nimport configurationJSON from \"../../utils/config.json\"\r\nimport layoutJSON from \"../../utils/layout.json\"\r\n\r\ninterface dataModel {\r\n  z: Number[],\r\n  type: String,\r\n  masterGraph: {\r\n    title: String,\r\n    xAxis: String,\r\n    yAxis: String,\r\n    zAxis: String\r\n  }\r\n}\r\n\r\nconst Surface3D: React.FC = (): JSX.Element => {\r\n  const [data, setData] = useState([]);\r\n  const [layout, setLayout] = useState({});\r\n  const [config, setConfig] = useState({});\r\n\r\n  useEffect(() => {\r\n    async function getData() {\r\n\r\n      const rows: [] = await fetchData(\"./csv/_surface3D.csv\")\r\n\r\n      function treatData(rows: []) {\r\n        var data = [];\r\n        var z = [];\r\n        for (var i = 0; i < rows.length; i++) {\r\n          z.push(Object.values(rows[i]))\r\n        }\r\n        var dataRow:dataModel = {\r\n          type: \"surface\",\r\n          masterGraph: {\r\n            title: \"Surface3D Title\",\r\n            xAxis: \"xAxis\",\r\n            yAxis: \"yAxis\",\r\n            zAxis: \"zAxis\"\r\n          },\r\n          z: z,\r\n        }\r\n        data.push(dataRow);\r\n        return data\r\n      }\r\n\r\n      var chartData = treatData(rows);\r\n      var chartConfig = configurationJSON.config;\r\n      var chartLayout = layoutJSON.layout.surface3D;\r\n\r\n      setData(chartData);\r\n      setConfig(chartConfig);\r\n      setLayout(chartLayout);\r\n    }\r\n    getData();\r\n  }, []);\r\n\r\n  return <Plot data={data} layout={layout} config={config} />;\r\n};\r\n\r\nexport default Surface3D;\r\n"],"sourceRoot":""}