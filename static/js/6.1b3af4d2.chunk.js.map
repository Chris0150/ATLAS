{"version":3,"sources":["utils/_data.tsx","components/charts/Bubbles.tsx"],"names":["path","a","fetch","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","value","results","Papa","parse","header","data","fetchData","Bubbles","useState","setData","frames","setFrames","layout","setLayout","config","setConfig","useEffect","treatData","rows","traces","lookup","getData","year","continent","byYear","trace","x","y","id","text","marker","size","i","length","datum","push","country","lifeExp","gdpPercap","pop","years","Object","keys","firstYear","continents","colors","dataRow","name","slice","mode","sizemode","sizeref","color","map","chartConfig","configurationJSON","chartLayout","layoutJSON","bubbles","chartData","chartFrames"],"mappings":"2NAGA,WAA0BA,GAA1B,yBAAAC,EAAA,sEAC2BC,MAAMF,GADjC,cACUG,EADV,OAEUC,EAASD,EAASE,KAAKC,YAFjC,SAGyBF,EAAOG,OAHhC,cAGUC,EAHV,OAIUC,EAAU,IAAIC,YAAY,SAC1BC,EAAMF,EAAQG,OAAOJ,EAAOK,OAC5BC,EAAUC,IAAKC,MAAML,EAAK,CAAEM,QAAQ,IAN9C,kBAOWH,EAAQI,MAPnB,6C,sBAUeC,I,opPC6GAC,UArGW,WAAoB,IAAD,EACnBC,mBAAS,IADU,mBACpCH,EADoC,KAC9BI,EAD8B,OAEfD,mBAAS,IAFM,mBAEpCE,EAFoC,KAE5BC,EAF4B,OAGfH,mBAAS,IAHM,mBAGpCI,EAHoC,KAG5BC,EAH4B,OAIfL,mBAAS,IAJM,mBAIpCM,EAJoC,KAI5BC,EAJ4B,KAkG3C,OA5FAC,qBAAU,WAAM,4CAEd,mBAGWC,EAHX,mBAAA7B,EAAA,6DAGW6B,EAHX,SAGqBC,GACjB,IAAIC,EAAS,GACTT,EAAS,GACTU,EAAS,GACb,SAASC,EAAQC,EAAMC,GACrB,IAAIC,EAAQC,EAaZ,OAZMD,EAASJ,EAAOE,MACpBE,EAASJ,EAAOE,GAAQ,KAEpBG,EAAQD,EAAOD,MACnBE,EAAQD,EAAOD,GAAa,CAC1BG,EAAG,GACHC,EAAG,GACHC,GAAI,GACJC,KAAM,GACNC,OAAQ,CAAEC,KAAM,MAGbN,EAGT,IAAK,IAAIO,EAAI,EAAGA,EAAId,EAAKe,OAAQD,IAAK,CACpC,IAAIE,EAAQhB,EAAKc,GACbP,EAAQJ,EAAQa,EAAMZ,KAAMY,EAAMX,WACtCE,EAAMI,KAAKM,KAAKD,EAAME,SACtBX,EAAMG,GAAGO,KAAKD,EAAME,SACpBX,EAAMC,EAAES,KAAKD,EAAMG,SACnBZ,EAAME,EAAEQ,KAAKD,EAAMI,WACnBb,EAAMK,OAAOC,KAAKI,KAAKD,EAAMK,KAG/B,IAAIC,EAAQC,OAAOC,KAAKtB,GACpBuB,EAAYvB,EAAOoB,EAAM,IACzBI,EAAaH,OAAOC,KAAKC,GACzBE,EAAS,CACX,UACA,UACA,UACA,UACA,WAEF,IAAKb,EAAI,EAAGA,EAAIY,EAAWX,OAAQD,IAAK,CACtC,IAAI3B,EAAOsC,EAAUC,EAAWZ,IAC5Bc,EAAqB,CACvBC,KAAMH,EAAWZ,GACjBN,EAAGrB,EAAKqB,EAAEsB,QACVrB,EAAGtB,EAAKsB,EAAEqB,QACVpB,GAAIvB,EAAKuB,GAAGoB,QACZnB,KAAMxB,EAAKwB,KAAKmB,QAChBC,KAAM,UACNnB,OAAQ,CACNC,KAAM1B,EAAKyB,OAAOC,KAAKiB,QACvBE,SAAU,OACVC,QAAS,IACTC,MAAOP,EAAOb,KAGlBb,EAAOgB,KAAKW,GAGd,IAAKd,EAAI,EAAGA,EAAIQ,EAAMP,OAAQD,IAC5BtB,EAAOyB,KAAK,CACVY,KAAMP,EAAMR,GAEZ3B,KAAMuC,EAAWS,KAAI,SAAU9B,GAC7B,OAAOF,EAAQmB,EAAMR,GAAIT,QAK/B,MAAO,CAACJ,EAAQT,IAzEpB,SACyBJ,YAAU,sBADnC,OACQY,EADR,OA4EMoC,EAAcC,EAAkBzC,OAChC0C,EAAcC,EAAW7C,OAAO8C,QAChCrD,EAAOY,EAAUC,GACjByC,EAAYtD,EAAK,GACjBuD,EAAcvD,EAAK,GAEvBI,EAAQkD,GACRhD,EAAUiD,GACV7C,EAAUuC,GACVzC,EAAU2C,GArFZ,6CAFc,uBAAC,WAAD,wBAyFdnC,KACC,IAEI,kBAAC,IAAD,CAAMhB,KAAMA,EAAMO,OAAQA,EAAQE,OAAQA,EAAQJ,OAAQA","file":"static/js/6.1b3af4d2.chunk.js","sourcesContent":["\r\nimport Papa from \"papaparse\";\r\n\r\nasync function fetchData (path) {\r\n    const response = await fetch(path);\r\n    const reader = response.body.getReader();\r\n    const result = await reader.read();\r\n    const decoder = new TextDecoder(\"utf-8\");\r\n    const csv = decoder.decode(result.value);\r\n    const results = Papa.parse(csv, { header: true });\r\n    return results.data;\r\n}\r\n\r\nexport default fetchData\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport configurationJSON from \"../../utils/config.json\"\r\nimport layoutJSON from \"../../utils/layout.json\";\r\nimport fetchData from \"../../utils/_data\";\r\n\r\ninterface dataModel {\r\n  name: String,\r\n  x: Number,\r\n  y: Number,\r\n  id: Number,\r\n  text: String,\r\n  mode: String,\r\n  marker: {\r\n    size: Number,\r\n    sizemode: String,\r\n    sizeref: Number,\r\n    color: String\r\n  }\r\n}\r\n\r\nconst Bubbles: React.FC = (): JSX.Element => {\r\n  const [data, setData] = useState([]);\r\n  const [frames, setFrames] = useState([]);\r\n  const [layout, setLayout] = useState({});\r\n  const [config, setConfig] = useState({});\r\n\r\n  useEffect(() => {\r\n\r\n    async function getData() {\r\n      const rows: [] = await fetchData(\"./csv/_bubbles.csv\")\r\n\r\n      function treatData(rows): [any, any] {\r\n        var traces = [];\r\n        var frames = [];\r\n        var lookup = {};\r\n        function getData(year, continent) {\r\n          var byYear, trace;\r\n          if (!(byYear = lookup[year])) {\r\n            byYear = lookup[year] = {};\r\n          }\r\n          if (!(trace = byYear[continent])) {\r\n            trace = byYear[continent] = {\r\n              x: [],\r\n              y: [],\r\n              id: [],\r\n              text: [],\r\n              marker: { size: [] },\r\n            };\r\n          }\r\n          return trace;\r\n        }\r\n\r\n        for (var i = 0; i < rows.length; i++) {\r\n          var datum = rows[i];\r\n          var trace = getData(datum.year, datum.continent);\r\n          trace.text.push(datum.country);\r\n          trace.id.push(datum.country);\r\n          trace.x.push(datum.lifeExp);\r\n          trace.y.push(datum.gdpPercap);\r\n          trace.marker.size.push(datum.pop);\r\n        }\r\n\r\n        var years = Object.keys(lookup);\r\n        var firstYear = lookup[years[0]];\r\n        var continents = Object.keys(firstYear);\r\n        var colors = [\r\n          \"#b71522\",\r\n          \"#ff9800\",\r\n          \"#f4c336\",\r\n          \"#5c77ec\",\r\n          \"#1924bb\"]\r\n\r\n        for (i = 0; i < continents.length; i++) {\r\n          var data = firstYear[continents[i]];\r\n          var dataRow: dataModel = {\r\n            name: continents[i],\r\n            x: data.x.slice(),\r\n            y: data.y.slice(),\r\n            id: data.id.slice(),\r\n            text: data.text.slice(),\r\n            mode: \"markers\",\r\n            marker: {\r\n              size: data.marker.size.slice(),\r\n              sizemode: \"area\",\r\n              sizeref: 200000,\r\n              color: colors[i]\r\n            }\r\n          }\r\n          traces.push(dataRow);\r\n        }\r\n\r\n        for (i = 0; i < years.length; i++) {\r\n          frames.push({\r\n            name: years[i],\r\n            // eslint-disable-next-line\r\n            data: continents.map(function (continent) {\r\n              return getData(years[i], continent);\r\n            }),\r\n          });\r\n        }\r\n\r\n        return [traces, frames]\r\n      }\r\n\r\n      var chartConfig = configurationJSON.config;\r\n      var chartLayout = layoutJSON.layout.bubbles;\r\n      var data = treatData(rows);\r\n      var chartData = data[0];\r\n      var chartFrames = data[1];\r\n\r\n      setData(chartData);\r\n      setFrames(chartFrames);\r\n      setConfig(chartConfig);\r\n      setLayout(chartLayout);\r\n    }\r\n    getData();\r\n  }, []);\r\n\r\n  return <Plot data={data} layout={layout} config={config} frames={frames} />\r\n};\r\n\r\nexport default Bubbles;\r\n"],"sourceRoot":""}