{"version":3,"sources":["utils/_data.tsx","components/charts/Regression.tsx"],"names":["path","a","fetch","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","value","results","Papa","parse","header","data","fetchData","Regression","useState","setData","layout","setLayout","config","setConfig","useEffect","treatData","rows","i","length","dataRow","type","name","x","x__0","x__1","x__2","x__3","x__4","x__5","x__6","y","y__0","y__1","y__2","y__3","y__4","y__5","y__6","line","color","line__color","push","chartConfig","configurationJSON","chartLayout","layoutJSON","regression","chartData","getData"],"mappings":"4NAGA,WAA0BA,GAA1B,yBAAAC,EAAA,sEAC2BC,MAAMF,GADjC,cACUG,EADV,OAEUC,EAASD,EAASE,KAAKC,YAFjC,SAGyBF,EAAOG,OAHhC,cAGUC,EAHV,OAIUC,EAAU,IAAIC,YAAY,SAC1BC,EAAMF,EAAQG,OAAOJ,EAAOK,OAC5BC,EAAUC,IAAKC,MAAML,EAAK,CAAEM,QAAQ,IAN9C,kBAOWH,EAAQI,MAPnB,6C,sBAUeC,I,opPC0CAC,UAvCc,WAAoB,IAAD,EACtBC,mBAAS,IADa,mBACvCH,EADuC,KACjCI,EADiC,OAElBD,mBAAS,IAFS,mBAEvCE,EAFuC,KAE/BC,EAF+B,OAGlBH,mBAAS,IAHS,mBAGvCI,EAHuC,KAG/BC,EAH+B,KAoC9C,OA/BAC,qBAAU,WAAM,4CAEd,mBAGWC,EAHX,eAAA3B,EAAA,6DAGW2B,EAHX,SAGqBC,GAEjB,IADA,IAAIX,EAAO,GACFY,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAAK,CACpC,IAAIE,EAAqB,CACvBC,KAAM,OACNC,KAAML,EAAKC,GAAGI,KACdC,EAAG,CAACN,EAAKC,GAAGM,KAAMP,EAAKC,GAAGO,KAAMR,EAAKC,GAAGQ,KAAMT,EAAKC,GAAGS,KAAMV,EAAKC,GAAGU,KAAMX,EAAKC,GAAGW,KAAMZ,EAAKC,GAAGY,MAChGC,EAAG,CAACd,EAAKC,GAAGc,KAAMf,EAAKC,GAAGe,KAAMhB,EAAKC,GAAGgB,KAAMjB,EAAKC,GAAGiB,KAAMlB,EAAKC,GAAGkB,KAAMnB,EAAKC,GAAGmB,KAAMpB,EAAKC,GAAGoB,MAChGC,KAAM,CAAEC,MAAOvB,EAAKC,GAAGuB,cAEzBnC,EAAKoC,KAAKtB,GAEZ,OAAOd,GAfX,SACyBC,YAAU,yBADnC,OACQU,EADR,OAkBM0B,EAAcC,EAAkB/B,OAChCgC,EAAcC,EAAWnC,OAAOoC,WAChCC,EAAYhC,EAAUC,GAE1BP,EAAQsC,GACRlC,EAAU6B,GACV/B,EAAUiC,GAxBZ,6CAFc,uBAAC,WAAD,wBA4BdI,KACC,IAEI,kBAAC,IAAD,CAAM3C,KAAMA,EAAMK,OAAQA,EAAQE,OAAQA","file":"static/js/10.fc1ce5cc.chunk.js","sourcesContent":["\r\nimport Papa from \"papaparse\";\r\n\r\nasync function fetchData (path) {\r\n    const response = await fetch(path);\r\n    const reader = response.body.getReader();\r\n    const result = await reader.read();\r\n    const decoder = new TextDecoder(\"utf-8\");\r\n    const csv = decoder.decode(result.value);\r\n    const results = Papa.parse(csv, { header: true });\r\n    return results.data;\r\n}\r\n\r\nexport default fetchData\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport configurationJSON from \"../../utils/config.json\"\r\nimport layoutJSON from \"../../utils/layout.json\"\r\nimport fetchData from \"../../utils/_data\";\r\n\r\ninterface dataModel {\r\n  x: Number[],\r\n  y: Number[],\r\n  name: String,\r\n  type: String,\r\n  line: {\r\n    color: String\r\n  }\r\n}\r\n\r\nconst Regression: React.FC = (): JSX.Element => {\r\n  const [data, setData] = useState([]);\r\n  const [layout, setLayout] = useState({});\r\n  const [config, setConfig] = useState({});\r\n\r\n  useEffect(() => {\r\n\r\n    async function getData() {\r\n      const rows: [] = await fetchData(\"./csv/_regression.csv\")\r\n\r\n      function treatData(rows) {\r\n        var data = [];\r\n        for (var i = 0; i < rows.length; i++) {\r\n          var dataRow: dataModel = {\r\n            type: \"line\",\r\n            name: rows[i].name,\r\n            x: [rows[i].x__0, rows[i].x__1, rows[i].x__2, rows[i].x__3, rows[i].x__4, rows[i].x__5, rows[i].x__6],\r\n            y: [rows[i].y__0, rows[i].y__1, rows[i].y__2, rows[i].y__3, rows[i].y__4, rows[i].y__5, rows[i].y__6],\r\n            line: { color: rows[i].line__color },\r\n          }\r\n          data.push(dataRow);\r\n        }\r\n        return data\r\n      }\r\n\r\n      var chartConfig = configurationJSON.config;\r\n      var chartLayout = layoutJSON.layout.regression;\r\n      var chartData = treatData(rows);\r\n\r\n      setData(chartData);\r\n      setConfig(chartConfig);\r\n      setLayout(chartLayout);\r\n    }\r\n    getData();\r\n  }, []);\r\n\r\n  return <Plot data={data} layout={layout} config={config} />\r\n};\r\n\r\nexport default Regression;\r\n\r\n"],"sourceRoot":""}