{"version":3,"sources":["utils/_data.tsx","components/charts/MapAnimated.tsx"],"names":["path","a","fetch","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","value","results","Papa","parse","header","data","fetchData","filter_and_unpack","rows","key","year","filter","row","map","MapAnimated","useState","setData","frames","setFrames","layout","setLayout","config","setConfig","useEffect","slider_steps","num","i","z","locations","text","name","push","label","toString","method","args","mode","transition","duration","frame","chartConfig","configurationJSON","chartData","type","locationmode","zauto","zmin","zmax","chartLayout","title","paper_bgcolor","plot_bgcolor","width","height","geo","scope","countrycolor","bgcolor","showland","landcolor","showlakes","lakecolor","subunitcolor","lonaxis","lataxis","updatemenus","x","y","yanchor","xanchor","showactive","direction","buttons","fromcurrent","sliders","active","steps","len","pad","t","b","l","currentvalue","visible","prefix","font","size","color","easing","getData"],"mappings":"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","file":"static/js/14.50444194.chunk.js","sourcesContent":["\r\nimport Papa from \"papaparse\";\r\n\r\nasync function fetchData (path) {\r\n    const response = await fetch(path);\r\n    const reader = response.body.getReader();\r\n    const result = await reader.read();\r\n    const decoder = new TextDecoder(\"utf-8\");\r\n    const csv = decoder.decode(result.value);\r\n    const results = Papa.parse(csv, { header: true });\r\n    return results.data;\r\n}\r\n\r\nexport default fetchData\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport configurationJSON from \"../../utils/config.json\"\r\nimport fetchData from \"../../utils/_data\";\r\n\r\ninterface dataModel{\r\n  type: String,\r\n  locationmode: String,\r\n  locations: String,\r\n  z: Number,\r\n  text: String,\r\n  zauto: Boolean,\r\n  zmin: Number,\r\n  zmax: Number\r\n}\r\n\r\nfunction filter_and_unpack(rows, key, year) {\r\n  // eslint-disable-next-line\r\n  return rows.filter((row) => row[\"year\"] == year).map((row) => row[key]);\r\n}\r\n\r\nconst MapAnimated: React.FC = (): JSX.Element => {\r\n  const [data, setData] = useState([]);\r\n  const [frames, setFrames] = useState([]);\r\n  const [layout, setLayout] = useState({});\r\n  const [config, setConfig] = useState({});\r\n\r\n  useEffect(() => {\r\n    async function getData() {\r\n      const rows: [] = await fetchData(\"./csv/_mapAnim.csv\")\r\n\r\n      var frames = [];\r\n      var slider_steps = [];\r\n\r\n      var n = 11;\r\n      var num = 1952;\r\n      for (var i = 0; i <= n; i++) {\r\n        var z = filter_and_unpack(rows, \"lifeExp\", num);\r\n        var locations = filter_and_unpack(rows, \"iso_alpha\", num);\r\n        frames[i] = {\r\n          data: [{ z: z, locations: locations, text: locations }],\r\n          name: num,\r\n        };\r\n        slider_steps.push({\r\n          label: num.toString(),\r\n          method: \"animate\",\r\n          args: [\r\n            [num],\r\n            {\r\n              mode: \"immediate\",\r\n              transition: { duration: 300 },\r\n              frame: { duration: 300 },\r\n            },\r\n          ],\r\n        });\r\n        num = num + 5;\r\n      }\r\n\r\n      var chartConfig =  configurationJSON.config;\r\n      var chartData:[dataModel] = [\r\n        {\r\n          type: \"choropleth\",\r\n          locationmode: \"world\",\r\n          locations: frames[0].data[0].locations,\r\n          z: frames[0].data[0].z,\r\n          text: frames[0].data[0].locations,\r\n          zauto: false,\r\n          zmin: 30,\r\n          zmax: 90,\r\n        },\r\n      ];\r\n\r\n      var chartLayout = {\r\n        title: \"Evolution of air pollutants concentration (PPM) per country:\", \r\n        paper_bgcolor: \"transparent\",\r\n        plot_bgcolor: \"transparent\",\r\n        width: 1080,\r\n        height: 760,\r\n        geo: {\r\n          scope: \"world\",\r\n          countrycolor: \"rgb(255, 255, 255)\",\r\n          bgcolor: \"rgba(255, 255, 255, 0.1)\",\r\n          showland: true,\r\n          landcolor: \"rgb(217, 217, 217)\",\r\n          showlakes: true,\r\n          lakecolor: \"rgb(255, 255, 255)\",\r\n          subunitcolor: \"rgb(255, 255, 255)\",\r\n          lonaxis: {},\r\n          lataxis: {},\r\n        },\r\n        updatemenus: [\r\n          {\r\n            x: 0.1,\r\n            y: 1,\r\n            yanchor: \"top\",\r\n            xanchor: \"right\",\r\n            showactive: false,\r\n            direction: \"left\",\r\n            type: \"buttons\",\r\n            bgcolor: \"#d39697\",\r\n            buttons: [\r\n              {\r\n                method: \"animate\",\r\n                args: [\r\n                  null,\r\n                  {\r\n                    fromcurrent: true,\r\n                    transition: {\r\n                      duration: 200,\r\n                    },\r\n                    frame: {\r\n                      duration: 500,\r\n                    },\r\n                  },\r\n                ],\r\n                label: \"Play\",\r\n              },\r\n              {\r\n                method: \"animate\",\r\n                args: [\r\n                  [null],\r\n                  {\r\n                    mode: \"immediate\",\r\n                    transition: {\r\n                      duration: 0,\r\n                    },\r\n                    frame: {\r\n                      duration: 0,\r\n                    },\r\n                  },\r\n                ],\r\n                label: \"Pause\",\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n        sliders: [\r\n          {\r\n            active: 0,\r\n            steps: slider_steps,\r\n            x: 0.1,\r\n            y: 1,\r\n            len: 0.9,\r\n            xanchor: \"left\",\r\n            yanchor: \"top\",\r\n            pad: { t: -30, b: 10, l: 20 },\r\n            currentvalue: {\r\n              visible: true,\r\n              prefix: \"Year:\",\r\n              xanchor: \"right\",\r\n              font: {\r\n                size: 20,\r\n                color: \"#666\",\r\n              },\r\n            },\r\n            transition: {\r\n              duration: 300,\r\n              easing: \"cubic-in-out\",\r\n            },\r\n          },\r\n        ],\r\n      };\r\n\r\n      setData(chartData);\r\n      setConfig(chartConfig);\r\n      setLayout(chartLayout);\r\n      setFrames(frames);\r\n    }\r\n    getData();\r\n  }, []);\r\n\r\n  return <Plot data={data} layout={layout} frames={frames} config={config} />\r\n};\r\n\r\nexport default MapAnimated;\r\n"],"sourceRoot":""}