{"version":3,"sources":["utils/_data.tsx","components/charts/Boxes.tsx"],"names":["path","a","fetch","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","value","results","Papa","parse","header","data","fetchData","Boxes","useState","setData","layout","setLayout","config","setConfig","useEffect","treatData","rows","i","length","dataRow","type","name","boxpoints","jitter","whiskerwidth","fillcolor","marker","size","line","width","color","y","y__0","y__1","y__2","y__3","y__4","y__5","y__6","y__7","y__8","y__9","y__10","y__11","y__12","y__13","y__14","y__15","y__16","y__17","y__18","y__19","y__20","y__21","y__22","y__23","y__24","y__25","y__26","y__27","y__28","y__29","y__30","push","chartConfig","configurationJSON","chartLayout","layoutJSON","boxes","chartData","getData"],"mappings":"2NAGA,WAA0BA,GAA1B,yBAAAC,EAAA,sEAC2BC,MAAMF,GADjC,cACUG,EADV,OAEUC,EAASD,EAASE,KAAKC,YAFjC,SAGyBF,EAAOG,OAHhC,cAGUC,EAHV,OAIUC,EAAU,IAAIC,YAAY,SAC1BC,EAAMF,EAAQG,OAAOJ,EAAOK,OAC5BC,EAAUC,IAAKC,MAAML,EAAK,CAAEM,QAAQ,IAN9C,kBAOWH,EAAQI,MAPnB,6C,sBAUeC,I,opPCsDAC,UAjDS,WAAoB,IAAD,EACjBC,mBAAS,IADQ,mBAClCH,EADkC,KAC5BI,EAD4B,OAEbD,mBAAS,IAFI,mBAElCE,EAFkC,KAE1BC,EAF0B,OAGbH,mBAAS,IAHI,mBAGlCI,EAHkC,KAG1BC,EAH0B,KA8CzC,OAzCAC,qBAAU,WAAM,4CAEd,mBAGWC,EAHX,eAAA3B,EAAA,6DAGW2B,EAHX,SAGqBC,GAEjB,IADA,IAAIX,EAAO,GACFY,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAAK,CACpC,IAAIE,EAAoB,CACtBC,KAAM,MACNC,KAAML,EAAKC,GAAGI,KACdC,UAAW,MACXC,OAAQ,GACRC,aAAc,GACdC,UAAWT,EAAKC,GAAGQ,UACnBC,OAAQ,CAAEC,KAAM,GAChBC,KAAM,CAAEC,MAAO,EAAGC,MAAMd,EAAKC,GAAGQ,WAChCM,EAAG,CAACf,EAAKC,GAAGe,KAAMhB,EAAKC,GAAGgB,KAAMjB,EAAKC,GAAGiB,KAAMlB,EAAKC,GAAGkB,KAAMnB,EAAKC,GAAGmB,KAAMpB,EAAKC,GAAGoB,KAClFrB,EAAKC,GAAGqB,KAAMtB,EAAKC,GAAGsB,KAAMvB,EAAKC,GAAGuB,KAAMxB,EAAKC,GAAGwB,KAAMzB,EAAKC,GAAGyB,MAAO1B,EAAKC,GAAG0B,MAC/E3B,EAAKC,GAAG2B,MAAO5B,EAAKC,GAAG4B,MAAO7B,EAAKC,GAAG6B,MAAO9B,EAAKC,GAAG8B,MAAO/B,EAAKC,GAAG+B,MAAOhC,EAAKC,GAAGgC,MACnFjC,EAAKC,GAAGiC,MAAOlC,EAAKC,GAAGkC,MAAOnC,EAAKC,GAAGmC,MAAOpC,EAAKC,GAAGoC,MAAOrC,EAAKC,GAAGqC,MAAOtC,EAAKC,GAAGsC,MACnFvC,EAAKC,GAAGuC,MAAOxC,EAAKC,GAAGwC,MAAOzC,EAAKC,GAAGyC,MAAO1C,EAAKC,GAAG0C,MAAO3C,EAAKC,GAAG2C,MAAO5C,EAAKC,GAAG4C,MACnF7C,EAAKC,GAAG6C,QAEVzD,EAAK0D,KAAK5C,GAEZ,OAAOd,GAxBX,SACwBC,YAAU,oBADlC,OACQU,EADR,OA2BMgD,EAAcC,EAAkBrD,OAChCsD,EAAcC,EAAWzD,OAAO0D,MAChCC,EAAYtD,EAAUC,GAE1BP,EAAQ4D,GACRxD,EAAUmD,GACVrD,EAAUuD,GAjCZ,6CAFc,uBAAC,WAAD,wBAsCdI,KACC,IAEI,kBAAC,IAAD,CAAMjE,KAAMA,EAAMK,OAAQA,EAAQE,OAAQA","file":"static/js/5.3a3a76a4.chunk.js","sourcesContent":["\r\nimport Papa from \"papaparse\";\r\n\r\nasync function fetchData (path) {\r\n    const response = await fetch(path);\r\n    const reader = response.body.getReader();\r\n    const result = await reader.read();\r\n    const decoder = new TextDecoder(\"utf-8\");\r\n    const csv = decoder.decode(result.value);\r\n    const results = Papa.parse(csv, { header: true });\r\n    return results.data;\r\n}\r\n\r\nexport default fetchData\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport  fetchData   from \"../../utils/_data\";\r\nimport configurationJSON from \"../../utils/config.json\"\r\nimport layoutJSON from \"../../utils/layout.json\"\r\n\r\ninterface dataModel{\r\n  type: String,\r\n  name: String,\r\n  boxpoints: String,\r\n  jitter: Number,\r\n  whiskerwidth: Number,\r\n  fillcolor: String,\r\n  marker: { size: Number },\r\n  line: { width: Number, color: String },\r\n  y: String[]\r\n}\r\n\r\nconst Boxes: React.FC = (): JSX.Element => {\r\n  const [data, setData] = useState([]);\r\n  const [layout, setLayout] = useState({});\r\n  const [config, setConfig] = useState({});\r\n\r\n  useEffect(() => {\r\n\r\n    async function getData() {\r\n      const rows:[] = await fetchData(\"./csv/_boxes.csv\")\r\n\r\n      function treatData(rows) {\r\n        var data = [];\r\n        for (var i = 0; i < rows.length; i++) {\r\n          var dataRow:dataModel = {\r\n            type: \"box\",\r\n            name: rows[i].name,\r\n            boxpoints: \"all\",\r\n            jitter: 0.5,\r\n            whiskerwidth: 0.2,\r\n            fillcolor: rows[i].fillcolor,\r\n            marker: { size: 2 },\r\n            line: { width: 1, color:rows[i].fillcolor },\r\n            y: [rows[i].y__0, rows[i].y__1, rows[i].y__2, rows[i].y__3, rows[i].y__4, rows[i].y__5,\r\n            rows[i].y__6, rows[i].y__7, rows[i].y__8, rows[i].y__9, rows[i].y__10, rows[i].y__11,\r\n            rows[i].y__12, rows[i].y__13, rows[i].y__14, rows[i].y__15, rows[i].y__16, rows[i].y__17,\r\n            rows[i].y__18, rows[i].y__19, rows[i].y__20, rows[i].y__21, rows[i].y__22, rows[i].y__23,\r\n            rows[i].y__24, rows[i].y__25, rows[i].y__26, rows[i].y__27, rows[i].y__28, rows[i].y__29,\r\n            rows[i].y__30]\r\n          }\r\n          data.push(dataRow);\r\n        }\r\n        return data\r\n      }\r\n\r\n      var chartConfig = configurationJSON.config;\r\n      var chartLayout = layoutJSON.layout.boxes;\r\n      var chartData = treatData(rows);\r\n\r\n      setData(chartData);\r\n      setConfig(chartConfig);\r\n      setLayout(chartLayout);\r\n    }\r\n\r\n    getData();\r\n  }, []);\r\n\r\n  return <Plot data={data} layout={layout} config={config} />\r\n};\r\n\r\nexport default Boxes;\r\n"],"sourceRoot":""}