{"version":3,"sources":["utils/_data.tsx","components/charts/Splom.tsx"],"names":["path","a","fetch","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","value","results","Papa","parse","header","data","fetchData","unpack","rows","key","map","row","replace","Splom","useState","setData","layout","setLayout","config","setConfig","useEffect","colors","i","length","push","pl_colorscale","type","dimensions","label","values","text","marker","color","colorscale","size","line","width","chartLayout","layoutJSON","splom","chartConfig","configurationJSON","getData"],"mappings":"4NAGA,WAA0BA,GAA1B,yBAAAC,EAAA,sEAC2BC,MAAMF,GADjC,cACUG,EADV,OAEUC,EAASD,EAASE,KAAKC,YAFjC,SAGyBF,EAAOG,OAHhC,cAGUC,EAHV,OAIUC,EAAU,IAAIC,YAAY,SAC1BC,EAAMF,EAAQG,OAAOJ,EAAOK,OAC5BC,EAAUC,IAAKC,MAAML,EAAK,CAAEM,QAAQ,IAN9C,kBAOWH,EAAQI,MAPnB,6C,sBAUeC,I,opPCaf,SAASC,EAAOC,EAAMC,GAClB,OAAOD,EAAKE,KAAI,SAAUC,GAAO,OAAOA,EAAIF,EAAIG,QAAQ,IAAK,SAmElDC,UAhES,WAAoB,IAAD,EACfC,mBAAS,IADM,mBAChCT,EADgC,KAC1BU,EAD0B,OAEXD,mBAAS,IAFE,mBAEhCE,EAFgC,KAExBC,EAFwB,OAGXH,mBAAS,IAHE,mBAGhCI,EAHgC,KAGxBC,EAHwB,KA6DvC,OAxDAC,qBAAU,WAAM,4CACZ,wCAAAhC,EAAA,sEAC0BkB,YAAU,oBADpC,OAMI,IALME,EADV,OAGQa,EAAS,GAGRC,EAAI,EAAGA,EAAIf,EAAOC,EAAM,SAASe,OAAQD,IACT,SAA7Bf,EAAOC,EAAM,SAASc,GACtBD,EAAOG,KAAK,GACwB,UAA7BjB,EAAOC,EAAM,SAASc,GAC7BD,EAAOG,KAAK,IACwB,UAA7BjB,EAAOC,EAAM,SAASc,IAC7BD,EAAOG,KAAK,GAIhBC,EAAgB,CAChB,CAAC,EAAK,WACN,CAAC,KAAO,WACR,CAAC,KAAO,WACR,CAAC,KAAO,WACR,CAAC,KAAO,WACR,CAAC,EAAG,YAGJpB,EAAmB,CAAC,CACpBqB,KAAM,QACNC,WAAY,CACR,CAAEC,MAAO,mBAAoBC,OAAQtB,EAAOC,EAAM,qBAClD,CAAEoB,MAAO,iBAAkBC,OAAQtB,EAAOC,EAAM,mBAChD,CAAEoB,MAAO,sBAAuBC,OAAQtB,EAAOC,EAAM,wBACrD,CAAEoB,MAAO,yBAA0BC,OAAQtB,EAAOC,EAAM,4BAE5DsB,KAAMvB,EAAOC,EAAM,SACnBuB,OAAQ,CACJC,MAAOX,EACPY,WAAYR,EACZS,KAAM,EACNC,KAAM,CACFH,MAAO,QACPI,MAAO,OAKfC,EAAcC,EAAWtB,OAAOuB,MAChCC,EAAcC,EAAkBvB,OAEpCH,EAAQV,GACRc,EAAUqB,GACVvB,EAAUoB,GAlDd,6CADY,uBAAC,WAAD,wBAqDZK,KACD,IAEI,kBAAC,IAAD,CAAMrC,KAAMA,EAAMW,OAAQA,EAAQE,OAAQA","file":"static/js/11.69d133b0.chunk.js","sourcesContent":["\r\nimport Papa from \"papaparse\";\r\n\r\nasync function fetchData (path) {\r\n    const response = await fetch(path);\r\n    const reader = response.body.getReader();\r\n    const result = await reader.read();\r\n    const decoder = new TextDecoder(\"utf-8\");\r\n    const csv = decoder.decode(result.value);\r\n    const results = Papa.parse(csv, { header: true });\r\n    return results.data;\r\n}\r\n\r\nexport default fetchData\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport fetchData   from \"../../utils/_data\";\r\nimport configurationJSON from \"../../utils/config.json\"\r\nimport layoutJSON from \"../../utils/layout.json\"\r\n\r\ninterface dataModel{\r\n    type: String,\r\n    text: String,\r\n    dimensions: [\r\n        { label: String, values: [] },\r\n        { label: String, values: [] },\r\n        { label: String, values: [] },\r\n        { label: String, values: [] }\r\n    ],\r\n    marker: {\r\n        color: String[],\r\n        colorscale: any,\r\n        size: Number,\r\n        line: {\r\n            color: String,\r\n            width: Number\r\n        }\r\n    }\r\n  }\r\n\r\nfunction unpack(rows, key) {\r\n    return rows.map(function (row) { return row[key.replace('.', ' ')]; });\r\n}\r\n\r\nconst Splom: React.FC = (): JSX.Element => {\r\n    const [data, setData] = useState([]);\r\n    const [layout, setLayout] = useState({});\r\n    const [config, setConfig] = useState({});\r\n\r\n    useEffect(() => {\r\n        async function getData() {\r\n            const rows:[] = await fetchData(\"./csv/_splom.csv\")\r\n\r\n            let colors = []\r\n            let i: number;\r\n\r\n            for (i = 0; i < unpack(rows, 'class').length; i++) {\r\n                if (unpack(rows, 'class')[i] === \"SiO2\") {\r\n                    colors.push(0)\r\n                } else if (unpack(rows, 'class')[i] === \"Al2O3\") {\r\n                    colors.push(0.5)\r\n                } else if (unpack(rows, 'class')[i] === \"Fe2O3\") {\r\n                    colors.push(1)\r\n                }\r\n            }\r\n\r\n            var pl_colorscale = [\r\n                [0.0, '#f4c336'],\r\n                [0.333, '#f4c336'],\r\n                [0.333, '#f48e36'],\r\n                [0.666, '#f48e36'],\r\n                [0.666, '#f44336'],\r\n                [1, '#f44336']\r\n            ]\r\n\r\n            var data:[dataModel] = [{\r\n                type: 'splom',\r\n                dimensions: [\r\n                    { label: 'Molecular charge', values: unpack(rows, 'Molecular charge') },\r\n                    { label: 'Molecular mass', values: unpack(rows, 'Molecular mass') },\r\n                    { label: 'Absolute molar mass', values: unpack(rows, 'Absolute molar mass') },\r\n                    { label: 'Relative isotopic mass', values: unpack(rows, 'Relative isotopic mass') }\r\n                ],\r\n                text: unpack(rows, 'class'),\r\n                marker: {\r\n                    color: colors,\r\n                    colorscale: pl_colorscale,\r\n                    size: 7,\r\n                    line: {\r\n                        color: 'white',\r\n                        width: 0.5\r\n                    }\r\n                }\r\n            }]\r\n\r\n            var chartLayout = layoutJSON.layout.splom;\r\n            var chartConfig = configurationJSON.config;\r\n\r\n            setData(data);\r\n            setConfig(chartConfig);\r\n            setLayout(chartLayout);\r\n        }\r\n        getData();\r\n    }, []);\r\n\r\n    return <Plot data={data} layout={layout} config={config} />\r\n};\r\n\r\nexport default Splom;\r\n"],"sourceRoot":""}